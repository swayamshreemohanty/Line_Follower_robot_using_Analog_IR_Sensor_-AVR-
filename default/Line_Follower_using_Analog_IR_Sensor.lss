
Line_Follower_using_Analog_IR_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003d  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000025c  00000000  00000000  000001cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000013a  00000000  00000000  0000042b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000028c  00000000  00000000  00000565  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000015b  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000009f  00000000  00000000  0000098f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  00000a2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 49 00 	call	0x92	; 0x92 <main>
  64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <adc_init>:
int read_adc_channel(unsigned char channel);

void adc_init(void)
{
                    
ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADPS2);
  6c:	84 ee       	ldi	r24, 0xE4	; 228
  6e:	86 b9       	out	0x06, r24	; 6
SFIOR=0x00;
  70:	10 be       	out	0x30, r1	; 48
}
  72:	08 95       	ret

00000074 <read_adc_channel>:

int read_adc_channel(unsigned char channel)
{
	int adc_value;
	unsigned char temp;
  	 ADMUX=(1<<REFS0)|channel;
  74:	80 64       	ori	r24, 0x40	; 64
  76:	87 b9       	out	0x07, r24	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  78:	84 ec       	ldi	r24, 0xC4	; 196
  7a:	99 e0       	ldi	r25, 0x09	; 9
  7c:	01 97       	sbiw	r24, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <read_adc_channel+0x8>
  	 _delay_ms(10);
	temp=ADCL;
  80:	24 b1       	in	r18, 0x04	; 4
	adc_value=ADCH;
  82:	45 b1       	in	r20, 0x05	; 5
	adc_value=(adc_value<<8)|temp;
  84:	94 2f       	mov	r25, r20
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	28 2b       	or	r18, r24
  8c:	39 2b       	or	r19, r25
  	 return adc_value;
}
  8e:	c9 01       	movw	r24, r18
  90:	08 95       	ret

00000092 <main>:
#define Ref 615//ref 3v
/* Defines a macro for the Refference value for the sensors*/


void main()
{
  92:	df 92       	push	r13
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
	

	DDRC=0xff;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	84 bb       	out	0x14, r24	; 20
int read_adc_channel(unsigned char channel);

void adc_init(void)
{
                    
ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADPS2);
  a0:	84 ee       	ldi	r24, 0xE4	; 228
  a2:	86 b9       	out	0x06, r24	; 6
SFIOR=0x00;
  a4:	10 be       	out	0x30, r1	; 48

int read_adc_channel(unsigned char channel)
{
	int adc_value;
	unsigned char temp;
  	 ADMUX=(1<<REFS0)|channel;
  a6:	20 e4       	ldi	r18, 0x40	; 64
  a8:	d2 2e       	mov	r13, r18
  aa:	a4 ec       	ldi	r26, 0xC4	; 196
  ac:	b9 e0       	ldi	r27, 0x09	; 9
  ae:	91 e4       	ldi	r25, 0x41	; 65
  b0:	e9 2e       	mov	r14, r25
		else 
		if(left_sensor_value < Ref && right_sensor_value > Ref)
		{
		

			PORTD=0x08;
  b2:	88 e0       	ldi	r24, 0x08	; 8
  b4:	f8 2e       	mov	r15, r24
		
		
		if(left_sensor_value < Ref && right_sensor_value < Ref)
		{

			PORTD=0b00001010;
  b6:	0a e0       	ldi	r16, 0x0A	; 10
		}
		else if(left_sensor_value > Ref && right_sensor_value < Ref)
		{
		

			PORTD=0x02;
  b8:	12 e0       	ldi	r17, 0x02	; 2
  ba:	d7 b8       	out	0x07, r13	; 7
  bc:	cd 01       	movw	r24, r26
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x2c>
  	 _delay_ms(10);
	temp=ADCL;
  c2:	94 b1       	in	r25, 0x04	; 4
	adc_value=ADCH;
  c4:	85 b1       	in	r24, 0x05	; 5
	adc_value=(adc_value<<8)|temp;
  c6:	f8 2f       	mov	r31, r24
  c8:	e0 e0       	ldi	r30, 0x00	; 0
  ca:	49 2f       	mov	r20, r25
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	4e 2b       	or	r20, r30
  d0:	5f 2b       	or	r21, r31

int read_adc_channel(unsigned char channel)
{
	int adc_value;
	unsigned char temp;
  	 ADMUX=(1<<REFS0)|channel;
  d2:	e7 b8       	out	0x07, r14	; 7
  d4:	cd 01       	movw	r24, r26
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x44>
  	 _delay_ms(10);
	temp=ADCL;
  da:	94 b1       	in	r25, 0x04	; 4
	adc_value=ADCH;
  dc:	85 b1       	in	r24, 0x05	; 5
	adc_value=(adc_value<<8)|temp;
  de:	78 2f       	mov	r23, r24
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	29 2f       	mov	r18, r25
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	26 2b       	or	r18, r22
  e8:	37 2b       	or	r19, r23

		right_sensor_value=read_adc_channel(1);
		/*Reading right sensor value*/
		
		
		if(left_sensor_value < Ref && right_sensor_value < Ref)
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	47 36       	cpi	r20, 0x67	; 103
  ee:	58 07       	cpc	r21, r24
  f0:	64 f4       	brge	.+24     	; 0x10a <main+0x78>
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	27 36       	cpi	r18, 0x67	; 103
  f6:	38 07       	cpc	r19, r24
  f8:	14 f4       	brge	.+4      	; 0xfe <main+0x6c>
		{

			PORTD=0b00001010;
  fa:	02 bb       	out	0x12, r16	; 18
  fc:	de cf       	rjmp	.-68     	; 0xba <main+0x28>
			
		}
		else 
		if(left_sensor_value < Ref && right_sensor_value > Ref)
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	27 36       	cpi	r18, 0x67	; 103
 102:	38 07       	cpc	r19, r24
 104:	11 f0       	breq	.+4      	; 0x10a <main+0x78>
		{
		

			PORTD=0x08;
 106:	f2 ba       	out	0x12, r15	; 18
 108:	d8 cf       	rjmp	.-80     	; 0xba <main+0x28>
 			/*Robot will move towards left*/
		}
		else if(left_sensor_value > Ref && right_sensor_value < Ref)
 10a:	48 56       	subi	r20, 0x68	; 104
 10c:	52 40       	sbci	r21, 0x02	; 2
 10e:	ac f2       	brlt	.-86     	; 0xba <main+0x28>
 110:	27 56       	subi	r18, 0x67	; 103
 112:	32 40       	sbci	r19, 0x02	; 2
 114:	94 f6       	brge	.-92     	; 0xba <main+0x28>
		{
		

			PORTD=0x02;
 116:	12 bb       	out	0x12, r17	; 18
 118:	d0 cf       	rjmp	.-96     	; 0xba <main+0x28>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
